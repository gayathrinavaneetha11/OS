#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#define BUFFER_SIZE 5  // Buffer size
#define TOTAL_ITEMS 10 // Total items to produce
int buffer[BUFFER_SIZE]; // Shared buffer
int count = 0;          // Number of items in buffer
pthread_mutex_t mutex;   // Mutex for critical section
sem_t empty;             // Counts empty slots
sem_t full;              // Counts filled slots
void* producer(void* arg) {
    for (int i = 1; i <= TOTAL_ITEMS; i++) {
        sleep(1); // Simulate production time
        sem_wait(&empty); // Wait if buffer is full
        pthread_mutex_lock(&mutex); // Lock buffer
 // Produce an item
        buffer[count] = i;
        printf("Producer produced: %d\n", i);
        count++;
pthread_mutex_unlock(&mutex); // Unlock buffer
        sem_post(&full); // Increase filled slots
    }
    return NULL;
}
void* consumer(void* arg) {
    for (int i = 1; i <= TOTAL_ITEMS; i++) {
        sem_wait(&full); // Wait if buffer is empty
        pthread_mutex_lock(&mutex); // Lock buffer

        // Consume an item
        int item = buffer[count - 1];
        count--;
        printf("Consumer consumed: %d\n", item);

        pthread_mutex_unlock(&mutex); // Unlock buffer
        sem_post(&empty); // Increase empty slots
        sleep(2); // Simulate consumption time
    }
    return NULL;
}

int main() {
    pthread_t prodThread, consThread;

    // Initialize mutex and semaphores
    pthread_mutex_init(&mutex, NULL);
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);

    // Create producer and consumer threads
    pthread_create(&prodThread, NULL, producer, NULL);
    pthread_create(&consThread, NULL, consumer, NULL);

    // Wait for threads to finish
    pthread_join(prodThread, NULL);
    pthread_join(consThread, NULL);

    // Destroy mutex and semaphores
    pthread_mutex_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);

    printf("All items produced and consumed. Exiting program.\n");
    return 0;
}
