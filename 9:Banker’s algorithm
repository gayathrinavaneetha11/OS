#include <stdio.h>

#define P 5 // Number of processes
#define R 3 // Number of resources

int available[R] = {3, 3, 2}; // Available resources
int maximum[P][R] = { // Maximum demand of each process
    {7, 5, 3},
    {3, 2, 2},
    {9, 0, 2},
    {2, 2, 2},
    {4, 3, 3}
};
int allocation[P][R] = { // Resources currently allocated
    {0, 1, 0},
    {2, 0, 0},
    {3, 0, 2},
    {2, 1, 1},
    {0, 0, 2}
};
int need[P][R]; // Resources still needed
int finished[P] = {0}; // Track finished processes

void calculate_need() {
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++)
            need[i][j] = maximum[i][j] - allocation[i][j];
}

int is_safe() {
    int work[R];
    for (int i = 0; i < R; i++)
        work[i] = available[i]; // Copy available resources

    int safe_sequence[P];
    int count = 0;

    while (count < P) {
        int found = 0;
        for (int i = 0; i < P; i++) {
            if (!finished[i]) { // Process is not finished
                int j;
                for (j = 0; j < R; j++)
                    if (need[i][j] > work[j]) // Check if needs can be met
                        break;

                if (j == R) { // If all needs can be satisfied
                    for (int k = 0; k < R; k++)
                        work[k] += allocation[i][k]; // Release resources

                    safe_sequence[count++] = i;
                    finished[i] = 1; // Mark process as finished
                    found = 1;
                }
            }
        }
        if (!found) // If no process was found that can be executed safely
            return 0;
    }

    // Print the safe sequence
    printf("Safe Sequence: ");
    for (int i = 0; i < P; i++)
        printf("P%d ", safe_sequence[i]);
    printf("\n");

    return 1; // System is in a safe state
}

int main() {
    calculate_need();

    printf("Checking for a safe sequence...\n");
    if (is_safe())
        printf("System is in a safe state.\n");
    else
        printf("System is in an unsafe state! Deadlock possible.\n");

    return 0;
}

