#include <stdio.h>
void roundRobinScheduling(int processes[], int n, int bt[], int quantum) {
    int rem_bt[n]; // Remaining burst times
    for (int i = 0; i < n; i++)
        rem_bt[i] = bt[i];

    int time = 0; // Current time

    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                done = 0;
                if (rem_bt[i] > quantum) {
                    time += quantum;
                    rem_bt[i] -= quantum;
                    printf("Process %d executed for %d time units\n", processes[i], quantum);
                } else {
                    time += rem_bt[i];
                    printf("Process %d executed for %d time units (Completed)\n", processes[i], rem_bt[i]);
                    rem_bt[i] = 0;
                }
            }
        }
        if (done)
            break;
    }
    printf("Total execution time: %d\n", time);
}

int main() {
    int n, quantum;
    
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int processes[n], burst_time[n];

    for (int i = 0; i < n; i++) {
        processes[i] = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }

    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    printf("\nExecuting Round Robin Scheduling...\n");
    roundRobinScheduling(processes, n, burst_time, quantum);

    return 0;
}

