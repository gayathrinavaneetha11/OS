#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int main() {
    int pipefd[2];  // Pipe file descriptors
    pid_t pid;
    char write_msg[] = "Hello from parent how are you!";
    char read_msg[100];

    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        return 1;
    }

    pid = fork();  // Create child process

    if (pid < 0) {
        perror("Fork failed");
        return 1;
    }

    if (pid > 0) {  // Parent process
        close(pipefd[0]);  // Close unused read end
        write(pipefd[1], write_msg, strlen(write_msg) + 1);
        close(pipefd[1]);  // Close write end after writing
    } else {  // Child process
        close(pipefd[1]);  // Close unused write end
        read(pipefd[0], read_msg, sizeof(read_msg));
        printf("Child received: %s\n", read_msg);
        close(pipefd[0]);  // Close read end
    }

    return 0;
}

